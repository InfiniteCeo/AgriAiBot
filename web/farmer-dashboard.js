// Farmer Dashboard JavaScript - Real functionality for farmers

let currentUser = null;
let farmerCrops = [];
let farmerSales = [];
let farmerExpenses = [];

// Sample market data - in real app this would come from API
const marketPrices = {
    maize: { price: 45, trend: 'up', change: 5 },
    beans: { price: 120, trend: 'up', change: 10 },
    tomatoes: { price: 80, trend: 'down', change: -8 },
    potatoes: { price: 60, trend: 'stable', change: 0 },
    onions: { price: 90, trend: 'up', change: 15 },
    cabbage: { price: 35, trend: 'stable', change: 2 },
    carrots: { price: 70, trend: 'up', change: 8 },
    spinach: { price: 50, trend: 'down', change: -5 }
};\n\n// AI recommendations based on farmer data\nconst aiRecommendations = [\n    {\n        type: 'price',\n        title: 'Sell Beans Now',\n        message: 'Bean prices are up 10% this week. Consider selling your harvest.',\n        priority: 'high',\n        icon: 'fas fa-arrow-up'\n    },\n    {\n        type: 'timing',\n        title: 'Plant Onions Soon',\n        message: 'Optimal planting window for onions is next 2 weeks.',\n        priority: 'medium',\n        icon: 'fas fa-calendar'\n    },\n    {\n        type: 'weather',\n        title: 'Rain Expected',\n        message: 'Heavy rains forecasted. Prepare drainage for tomatoes.',\n        priority: 'high',\n        icon: 'fas fa-cloud-rain'\n    },\n    {\n        type: 'market',\n        title: 'High Demand',\n        message: 'Local market has high demand for leafy vegetables.',\n        priority: 'medium',\n        icon: 'fas fa-chart-line'\n    }\n];\n\n// Initialize dashboard\ndocument.addEventListener('DOMContentLoaded', async () => {\n    console.log('Farmer dashboard loading...');\n    \n    // Check authentication\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n        window.location.href = 'login.html';\n        return;\n    }\n    \n    try {\n        await loadUserProfile();\n        await loadFarmerData();\n        displayDashboard();\n        setupEventListeners();\n        \n        console.log('Farmer dashboard loaded successfully');\n    } catch (error) {\n        console.error('Error loading dashboard:', error);\n        showError('Failed to load dashboard. Please refresh the page.');\n    }\n});\n\n// Load user profile\nasync function loadUserProfile() {\n    try {\n        const response = await fetch('/api/auth/profile', {\n            headers: {\n                'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n            }\n        });\n        \n        if (!response.ok) {\n            throw new Error('Failed to load profile');\n        }\n        \n        const data = await response.json();\n        currentUser = data.user;\n        \n        // Update UI\n        document.getElementById('farmerName').textContent = `Welcome, ${currentUser.name}!`;\n        \n        // Check if user is a farmer\n        if (currentUser.user_type !== 'farmer') {\n            showWarning('This dashboard is designed for farmers. Some features may not be available.');\n        }\n        \n    } catch (error) {\n        console.error('Error loading profile:', error);\n        throw error;\n    }\n}\n\n// Load farmer-specific data\nasync function loadFarmerData() {\n    // Load from localStorage for now (in real app, this would be from database)\n    farmerCrops = JSON.parse(localStorage.getItem(`farmer_crops_${currentUser.id}`)) || [];\n    farmerSales = JSON.parse(localStorage.getItem(`farmer_sales_${currentUser.id}`)) || [];\n    farmerExpenses = JSON.parse(localStorage.getItem(`farmer_expenses_${currentUser.id}`)) || [];\n    \n    // Add sample data if empty\n    if (farmerCrops.length === 0) {\n        farmerCrops = [\n            {\n                id: 1,\n                type: 'maize',\n                area: 2.5,\n                plantingDate: '2024-03-15',\n                expectedHarvest: 2500,\n                status: 'growing'\n            },\n            {\n                id: 2,\n                type: 'beans',\n                area: 1.0,\n                plantingDate: '2024-04-01',\n                expectedHarvest: 800,\n                status: 'ready'\n            }\n        ];\n        saveFarmerData();\n    }\n    \n    if (farmerSales.length === 0) {\n        farmerSales = [\n            {\n                id: 1,\n                crop: 'tomatoes',\n                quantity: 500,\n                price: 75,\n                buyer: 'Local Market',\n                date: '2024-10-20',\n                total: 37500\n            },\n            {\n                id: 2,\n                crop: 'onions',\n                quantity: 300,\n                price: 85,\n                buyer: 'Wholesaler',\n                date: '2024-10-18',\n                total: 25500\n            }\n        ];\n        saveFarmerData();\n    }\n}\n\n// Display dashboard data\nfunction displayDashboard() {\n    updateFinancialStats();\n    displayCrops();\n    displayMarketPrices();\n    displayAIRecommendations();\n    displayWeatherInfo();\n}\n\n// Update financial statistics\nfunction updateFinancialStats() {\n    const totalRevenue = farmerSales.reduce((sum, sale) => sum + sale.total, 0);\n    const totalExpenses = farmerExpenses.reduce((sum, expense) => sum + expense.amount, 0);\n    const monthlyProfit = totalRevenue - totalExpenses;\n    const potentialSavings = calculatePotentialSavings();\n    \n    document.getElementById('monthlyProfit').textContent = `KSh ${monthlyProfit.toLocaleString()}`;\n    document.getElementById('totalRevenue').textContent = `KSh ${totalRevenue.toLocaleString()}`;\n    document.getElementById('totalExpenses').textContent = `KSh ${totalExpenses.toLocaleString()}`;\n    document.getElementById('potentialSavings').textContent = `KSh ${potentialSavings.toLocaleString()}`;\n}\n\n// Calculate potential savings\nfunction calculatePotentialSavings() {\n    let savings = 0;\n    \n    // Calculate savings from better timing\n    farmerCrops.forEach(crop => {\n        const currentPrice = marketPrices[crop.type]?.price || 0;\n        const potentialPrice = currentPrice * 1.15; // 15% better price with timing\n        const potentialIncrease = (potentialPrice - currentPrice) * crop.expectedHarvest;\n        savings += potentialIncrease;\n    });\n    \n    return Math.round(savings);\n}\n\n// Display farmer's crops\nfunction displayCrops() {\n    const container = document.getElementById('cropsGrid');\n    \n    if (farmerCrops.length === 0) {\n        container.innerHTML = `\n            <div class=\"col-span-2 text-center py-8\">\n                <i class=\"fas fa-seedling text-4xl text-gray-300 mb-4\"></i>\n                <p class=\"text-gray-500\">No crops added yet. Click \"Add Crop\" to get started!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    container.innerHTML = farmerCrops.map(crop => {\n        const marketPrice = marketPrices[crop.type]?.price || 0;\n        const estimatedValue = marketPrice * crop.expectedHarvest;\n        const daysToHarvest = calculateDaysToHarvest(crop.plantingDate, crop.type);\n        \n        return `\n            <div class=\"crop-card bg-gray-50 rounded-lg p-4 border border-gray-200\">\n                <div class=\"flex justify-between items-start mb-3\">\n                    <div>\n                        <h3 class=\"font-semibold text-gray-800 capitalize\">${crop.type}</h3>\n                        <p class=\"text-sm text-gray-600\">${crop.area} acres</p>\n                    </div>\n                    <span class=\"px-2 py-1 text-xs rounded-full ${\n                        crop.status === 'ready' ? 'bg-green-100 text-green-800' :\n                        crop.status === 'growing' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-gray-100 text-gray-800'\n                    }\">\n                        ${crop.status}\n                    </span>\n                </div>\n                <div class=\"space-y-2 text-sm\">\n                    <div class=\"flex justify-between\">\n                        <span class=\"text-gray-600\">Expected:</span>\n                        <span class=\"font-medium\">${crop.expectedHarvest} kg</span>\n                    </div>\n                    <div class=\"flex justify-between\">\n                        <span class=\"text-gray-600\">Est. Value:</span>\n                        <span class=\"font-medium text-green-600\">KSh ${estimatedValue.toLocaleString()}</span>\n                    </div>\n                    <div class=\"flex justify-between\">\n                        <span class=\"text-gray-600\">Harvest:</span>\n                        <span class=\"font-medium\">${daysToHarvest > 0 ? `${daysToHarvest} days` : 'Ready!'}</span>\n                    </div>\n                </div>\n                ${crop.status === 'ready' ? `\n                    <button onclick=\"quickSell('${crop.type}')\" class=\"w-full mt-3 bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded text-sm\">\n                        <i class=\"fas fa-money-bill mr-1\"></i>Quick Sell\n                    </button>\n                ` : ''}\n            </div>\n        `;\n    }).join('');\n}\n\n// Display market prices\nfunction displayMarketPrices() {\n    const container = document.getElementById('marketPrices');\n    \n    container.innerHTML = Object.entries(marketPrices).map(([crop, data]) => {\n        const trendIcon = data.trend === 'up' ? 'fa-arrow-up' : \n                         data.trend === 'down' ? 'fa-arrow-down' : 'fa-minus';\n        const trendColor = data.trend === 'up' ? 'price-trend-up' : \n                          data.trend === 'down' ? 'price-trend-down' : 'price-trend-stable';\n        \n        return `\n            <div class=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <div class=\"flex items-center space-x-3\">\n                    <i class=\"fas fa-seedling text-green-600\"></i>\n                    <span class=\"font-medium capitalize\">${crop}</span>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <span class=\"font-bold\">KSh ${data.price}/kg</span>\n                    <span class=\"${trendColor} text-sm\">\n                        <i class=\"fas ${trendIcon}\"></i>\n                        ${Math.abs(data.change)}%\n                    </span>\n                </div>\n            </div>\n        `;\n    }).join('');\n}\n\n// Display AI recommendations\nfunction displayAIRecommendations() {\n    const container = document.getElementById('aiRecommendations');\n    \n    container.innerHTML = aiRecommendations.slice(0, 3).map(rec => {\n        const priorityColor = rec.priority === 'high' ? 'border-red-200 bg-red-50' : \n                             rec.priority === 'medium' ? 'border-yellow-200 bg-yellow-50' : \n                             'border-blue-200 bg-blue-50';\n        \n        return `\n            <div class=\"${priorityColor} border rounded-lg p-3\">\n                <div class=\"flex items-start space-x-3\">\n                    <i class=\"${rec.icon} text-lg mt-1 ${\n                        rec.priority === 'high' ? 'text-red-600' :\n                        rec.priority === 'medium' ? 'text-yellow-600' :\n                        'text-blue-600'\n                    }\"></i>\n                    <div class=\"flex-1\">\n                        <h4 class=\"font-medium text-gray-800\">${rec.title}</h4>\n                        <p class=\"text-sm text-gray-600 mt-1\">${rec.message}</p>\n                    </div>\n                </div>\n            </div>\n        `;\n    }).join('');\n}\n\n// Display weather information\nfunction displayWeatherInfo() {\n    const container = document.getElementById('weatherInfo');\n    \n    // Sample weather data\n    const weatherData = {\n        temperature: '24°C',\n        condition: 'Partly Cloudy',\n        humidity: '65%',\n        rainfall: '15mm expected',\n        advice: 'Good conditions for planting. Consider watering tomatoes.'\n    };\n    \n    container.innerHTML = `\n        <div class=\"space-y-3\">\n            <div class=\"flex justify-between items-center\">\n                <span class=\"text-gray-600\">Temperature:</span>\n                <span class=\"font-medium\">${weatherData.temperature}</span>\n            </div>\n            <div class=\"flex justify-between items-center\">\n                <span class=\"text-gray-600\">Condition:</span>\n                <span class=\"font-medium\">${weatherData.condition}</span>\n            </div>\n            <div class=\"flex justify-between items-center\">\n                <span class=\"text-gray-600\">Humidity:</span>\n                <span class=\"font-medium\">${weatherData.humidity}</span>\n            </div>\n            <div class=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-3\">\n                <p class=\"text-sm text-blue-800\">\n                    <i class=\"fas fa-lightbulb mr-2\"></i>${weatherData.advice}\n                </p>\n            </div>\n        </div>\n    `;\n}\n\n// Setup event listeners\nfunction setupEventListeners() {\n    // Add crop form\n    document.getElementById('addCropForm').addEventListener('submit', handleAddCrop);\n    \n    // Record sale form\n    document.getElementById('recordSaleForm').addEventListener('submit', handleRecordSale);\n    \n    // Set default dates\n    document.getElementById('plantingDate').value = new Date().toISOString().split('T')[0];\n    document.getElementById('saleDate').value = new Date().toISOString().split('T')[0];\n}\n\n// Handle add crop\nfunction handleAddCrop(e) {\n    e.preventDefault();\n    \n    const cropType = document.getElementById('cropType').value;\n    const cropArea = parseFloat(document.getElementById('cropArea').value);\n    const plantingDate = document.getElementById('plantingDate').value;\n    const expectedHarvest = parseInt(document.getElementById('expectedHarvest').value);\n    \n    if (!cropType || !cropArea || !plantingDate || !expectedHarvest) {\n        showError('Please fill in all fields');\n        return;\n    }\n    \n    const newCrop = {\n        id: Date.now(),\n        type: cropType,\n        area: cropArea,\n        plantingDate: plantingDate,\n        expectedHarvest: expectedHarvest,\n        status: 'growing'\n    };\n    \n    farmerCrops.push(newCrop);\n    saveFarmerData();\n    displayCrops();\n    updateFinancialStats();\n    closeAddCropModal();\n    \n    showSuccess(`${cropType} crop added successfully!`);\n}\n\n// Handle record sale\nfunction handleRecordSale(e) {\n    e.preventDefault();\n    \n    const crop = document.getElementById('saleCrop').value;\n    const quantity = parseInt(document.getElementById('saleQuantity').value);\n    const price = parseFloat(document.getElementById('salePrice').value);\n    const buyer = document.getElementById('saleBuyer').value;\n    const date = document.getElementById('saleDate').value;\n    \n    if (!crop || !quantity || !price || !buyer || !date) {\n        showError('Please fill in all fields');\n        return;\n    }\n    \n    const newSale = {\n        id: Date.now(),\n        crop: crop,\n        quantity: quantity,\n        price: price,\n        buyer: buyer,\n        date: date,\n        total: quantity * price\n    };\n    \n    farmerSales.push(newSale);\n    saveFarmerData();\n    updateFinancialStats();\n    closeRecordSaleModal();\n    \n    showSuccess(`Sale of ${quantity}kg ${crop} recorded successfully! Total: KSh ${newSale.total.toLocaleString()}`);\n}\n\n// Modal functions\nfunction addCrop() {\n    document.getElementById('addCropModal').classList.remove('hidden');\n}\n\nfunction closeAddCropModal() {\n    document.getElementById('addCropModal').classList.add('hidden');\n    document.getElementById('addCropForm').reset();\n}\n\nfunction recordSale() {\n    // Populate crop options\n    const select = document.getElementById('saleCrop');\n    select.innerHTML = '<option value=\"\">Select crop...</option>' + \n        farmerCrops.map(crop => `<option value=\"${crop.type}\">${crop.type}</option>`).join('');\n    \n    document.getElementById('recordSaleModal').classList.remove('hidden');\n}\n\nfunction closeRecordSaleModal() {\n    document.getElementById('recordSaleModal').classList.add('hidden');\n    document.getElementById('recordSaleForm').reset();\n}\n\nfunction recordExpense() {\n    // Simple prompt for now - could be enhanced with modal\n    const description = prompt('Expense description:');\n    const amount = parseFloat(prompt('Amount (KSh):'));\n    \n    if (description && amount && amount > 0) {\n        const newExpense = {\n            id: Date.now(),\n            description: description,\n            amount: amount,\n            date: new Date().toISOString().split('T')[0]\n        };\n        \n        farmerExpenses.push(newExpense);\n        saveFarmerData();\n        updateFinancialStats();\n        \n        showSuccess(`Expense of KSh ${amount.toLocaleString()} recorded successfully!`);\n    }\n}\n\n// Quick actions\nfunction quickSell(cropType) {\n    const crop = farmerCrops.find(c => c.type === cropType && c.status === 'ready');\n    if (!crop) return;\n    \n    const marketPrice = marketPrices[cropType]?.price || 0;\n    const quantity = prompt(`How many kg of ${cropType} to sell? (Available: ${crop.expectedHarvest}kg)`);\n    \n    if (quantity && parseInt(quantity) > 0 && parseInt(quantity) <= crop.expectedHarvest) {\n        const price = prompt(`Price per kg? (Market price: KSh ${marketPrice})`) || marketPrice;\n        \n        if (price && parseFloat(price) > 0) {\n            const newSale = {\n                id: Date.now(),\n                crop: cropType,\n                quantity: parseInt(quantity),\n                price: parseFloat(price),\n                buyer: 'Quick Sale',\n                date: new Date().toISOString().split('T')[0],\n                total: parseInt(quantity) * parseFloat(price)\n            };\n            \n            farmerSales.push(newSale);\n            \n            // Update crop\n            crop.expectedHarvest -= parseInt(quantity);\n            if (crop.expectedHarvest <= 0) {\n                crop.status = 'sold';\n            }\n            \n            saveFarmerData();\n            displayCrops();\n            updateFinancialStats();\n            \n            showSuccess(`Quick sale completed! Total: KSh ${newSale.total.toLocaleString()}`);\n        }\n    }\n}\n\nfunction findBuyers() {\n    showInfo('Buyer matching feature coming soon! For now, try local markets or contact wholesalers directly.');\n}\n\nfunction joinSacco() {\n    window.open('sacco.html', '_blank');\n}\n\nfunction refreshPrices() {\n    // Simulate price updates\n    Object.keys(marketPrices).forEach(crop => {\n        const change = (Math.random() - 0.5) * 10; // Random change between -5% and +5%\n        marketPrices[crop].price = Math.round(marketPrices[crop].price * (1 + change / 100));\n        marketPrices[crop].change = Math.round(change);\n        marketPrices[crop].trend = change > 2 ? 'up' : change < -2 ? 'down' : 'stable';\n    });\n    \n    displayMarketPrices();\n    updateFinancialStats();\n    showSuccess('Market prices updated!');\n}\n\nfunction generateRecommendations() {\n    // Shuffle recommendations to show different ones\n    const shuffled = [...aiRecommendations].sort(() => Math.random() - 0.5);\n    displayAIRecommendations();\n    showSuccess('New AI recommendations generated!');\n}\n\n// Utility functions\nfunction calculateDaysToHarvest(plantingDate, cropType) {\n    const planted = new Date(plantingDate);\n    const now = new Date();\n    const daysPlanted = Math.floor((now - planted) / (1000 * 60 * 60 * 24));\n    \n    // Typical growing periods (days)\n    const growingPeriods = {\n        maize: 120,\n        beans: 90,\n        tomatoes: 80,\n        potatoes: 100,\n        onions: 120,\n        cabbage: 70,\n        carrots: 75,\n        spinach: 45\n    };\n    \n    const growingPeriod = growingPeriods[cropType] || 90;\n    return Math.max(0, growingPeriod - daysPlanted);\n}\n\nfunction saveFarmerData() {\n    localStorage.setItem(`farmer_crops_${currentUser.id}`, JSON.stringify(farmerCrops));\n    localStorage.setItem(`farmer_sales_${currentUser.id}`, JSON.stringify(farmerSales));\n    localStorage.setItem(`farmer_expenses_${currentUser.id}`, JSON.stringify(farmerExpenses));\n}\n\nfunction logout() {\n    localStorage.removeItem('authToken');\n    window.location.href = 'login.html';\n}\n\n// Notification functions\nfunction showSuccess(message) {\n    showNotification(message, 'success');\n}\n\nfunction showError(message) {\n    showNotification(message, 'error');\n}\n\nfunction showWarning(message) {\n    showNotification(message, 'warning');\n}\n\nfunction showInfo(message) {\n    showNotification(message, 'info');\n}\n\nfunction showNotification(message, type) {\n    // Simple alert for now - could be enhanced with toast notifications\n    const icons = {\n        success: '✅',\n        error: '❌',\n        warning: '⚠️',\n        info: 'ℹ️'\n    };\n    \n    alert(`${icons[type]} ${message}`);\n}"